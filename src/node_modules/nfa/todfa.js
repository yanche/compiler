
var dfa = require('dfa');
var utility = require('utility');

//use this CONV after epsilon closure has been calculated
//states: all states, array
//startstates: start states, state or array of states
//epcmap: epsilon-closure map
var conv = function (states, startstates, epcmap) {
    var statenummap = new Map();
    for (var s = 0; s < states.length; ++s) statenummap.set(states[s].getId(), states[s]);
    if (!Array.isArray(startstates)) startstates = [startstates];
    startstates = utility.closureOfNodes(startstates.map(function (s) { return s.getId(); }), epcmap).map(function (n) { return statenummap.get(n); });
    var dfaIdGen = new utility.IdGen();
    var dfastatemap = new Map();
    var start = new dfa.State(dfaIdGen);
    if (startstates.some(function (s) { return s.getTerminal(); })) start.terminal(true);
    var startNFAId = statesId(startstates);
    dfastatemap.set(startNFAId, start);
    var queue = [startstates];
    while (queue.length > 0) {
        var curstates = queue.shift();
        var curstatesId = statesId(curstates);
        var curdfaState = dfastatemap.get(curstatesId);
        var tmap = new Map();
        for (var i = 0; i < curstates.length; ++i) {
            var nfastate = curstates[i];
            var tranchars = nfastate.getAllTransitionChars();
            for (var t = 0; t < tranchars.length; ++t) {
                var ch = tranchars[i];
                if (ch === '') continue;
                var tostates = [...nfastate.getTransition(ch)];
                var chset = tmap.get(ch);
                if (chset == null) {
                    chset = new Set();
                    tmap.set(ch, chset);
                }
                for (var p = 0; p < tostates.length; ++p)
                    chset.add(tostates[p]);
            }
        }
        var tarr = [...tmap];
        for (var i = 0; i < tarr.length; ++i) {
            var tpair = tarr[i];
            var ch = tpair[0], closurestates = utility.closureOfNodes([...tpair[1]].map(function (s) { return s.getId(); }), epcmap).map(function (n) { return statenummap.get(n); });
            var dfaStateId = statesId(closurestates);
            var dfaState = dfastatemap.get(dfaStateId);
            if (dfaState == null) {
                dfaState = new dfa.State(dfaIdGen);
                if (closurestates.some(function (s) { return s.getTerminal(); })) dfaState.terminal(true);
                dfastatemap.set(dfaStateId, dfaState);
                queue.push(closurestates);
            }
            curdfaState.transition(ch, dfaState);
        }
    }
    return start;
};

var statesId = function (states) {
    return states.map(function (s) { return s.getId(); }).sort(function (v1, v2) { return v1 - v2; }).join(',');
};

module.exports = conv;
