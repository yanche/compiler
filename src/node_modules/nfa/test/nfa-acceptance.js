
var assert = require('assert');
var nfa = require('nfa');
var utility = require('utility');

//arr: array of {str:, expected: bool}
var bulkValidate = function (arr, nfa) {
    for (var i = 0; i < arr.length; ++i) {
        var item = arr[i];
        assert.equal(item.expected, nfa.accept(item.str));
    }
};
//arr: array of strings
var acceptStrings = function (arr, nfa) {
    bulkValidate(arr.map(function (str) { return { str: str, expected: true } }), nfa);
};

describe('nfa-acceptance', function () {
    describe('no epsilon move', function () {
        it('1 state', function () {
            var idGen = new utility.IdGen();
            var s0 = new nfa.State(idGen, true, true);
            s0.transition('a', s0);
            bulkValidate([
                { str: 'aaaaa', expected: true },
                { str: 'a', expected: true },
                { str: 'b', expected: false },
                { str: 'baa', expected: false }
            ], nfa.createNFA([s0]));
        });

        it('2 states', function () {
            var idGen = new utility.IdGen();
            var s0 = new nfa.State(idGen, true);
            var s1 = new nfa.State(idGen, false, true);
            s0.transition('a', s1);
            var states = [s0, s1];
            bulkValidate([{ str: 'aaaaa', expected: false }, { str: 'a', expected: true }], nfa.createNFA(states));
        });

        it('3 states', function () {
            var idGen = new utility.IdGen();
            var s0 = new nfa.State(idGen, true);
            var s1 = new nfa.State(idGen);
            var s2 = new nfa.State(idGen, false, true);
            s0.transition('a', s1);
            s1.transition('b', s2);
            var states = [s0, s1, s2];
            bulkValidate([{ str: 'ab', expected: true }, { str: 'a', expected: false }], nfa.createNFA(states));
        });
    });

    describe('epsilon moves', function () {
        it('4 states', function () {
            var idGen = new utility.IdGen();
            var s0 = new nfa.State(idGen, true);
            var s1 = new nfa.State(idGen);
            var s2 = new nfa.State(idGen);
            var s3 = new nfa.State(idGen, false, true);
            s0.transition('', s1);
            s0.transition('a', s0);
            s1.transition('', s2);
            s1.transition('b', s1);
            s2.transition('', s3);
            s2.transition('c', s2);
            s3.transition('d', s3);
            var states = [s0, s1, s2, s3];
            acceptStrings(['a', 'b', 'c', 'd', 'aa', 'bb', 'cc', 'dd', 'abcd', 'aabbccdd', 'ad', 'accdd', 'bbcd', 'bbdd'], nfa.createNFA(states));
        });
    });
});
