
var assert = require('assert');
var nfa = require('nfa');
var utility = require('utility');
var automata = require('automata');

var Transition = automata.Transition;

//arr: array of {str:, expected: bool}
var bulkValidate = function (arr, nfa) {
    for (var i = 0; i < arr.length; ++i) {
        var item = arr[i];
        assert.equal(item.expected, nfa.accept(item.str));
    }
};
//arr: array of strings
var acceptStrings = function (arr, nfa) {
    bulkValidate(arr.map(function (str) { return { str: str, expected: true } }), nfa);
};

var tran = function (srcNode, tgtNode, symbol) {
    return new Transition(srcNode, tgtNode, symbol);
};

describe('nfa-acceptance', function () {
    describe('no epsilon move', function () {
        it('1 state', function () {
            bulkValidate([
                { str: 'aaaaa', expected: true },
                { str: 'a', expected: true },
                { str: 'b', expected: false },
                { str: 'baa', expected: false }
            ], nfa.createNFA([tran(0, 0, 'a')], [0], [0]));
        });

        it('2 states', function () {
            bulkValidate([
                { str: 'aaaaa', expected: false },
                { str: 'a', expected: true }
            ], nfa.createNFA([tran(0, 1, 'a')], [0], [1]));
        });

        it('3 states', function () {
            bulkValidate([
                { str: 'ab', expected: true },
                { str: 'a', expected: false }
            ], nfa.createNFA([tran(0, 1, 'a'), tran(1, 2, 'b')], [0], [2]));
        });
    });

    describe('epsilon moves', function () {
        it('4 states', function () {
            acceptStrings(['a', 'b', 'c', 'd', 'aa', 'bb', 'cc', 'dd', 'abcd',
                'aabbccdd', 'ad', 'accdd', 'bbcd',
                'bbdd'], nfa.createNFA([
                    tran(0, 0, 'a'),
                    tran(0, 1, ''),
                    tran(1, 1, 'b'),
                    tran(1, 2, ''),
                    tran(2, 2, 'c'),
                    tran(2, 3, ''),
                    tran(3, 3, 'd')
                ], [0], [3]));
        });
    });
});
