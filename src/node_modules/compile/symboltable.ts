
export class SymbolFrame {
    private _map: Map<string, SymbolAttrs>;
    private _parent: SymbolFrame;

    find(varname: string): SymbolAttrs {
        if (this._map.has(varname)) return this._map.get(varname);
        else if (this._parent == null) return null;
        else return this._parent.find(varname);
    }
    add(varname: string, symattrs: SymbolAttrs): this {
        if (symattrs == null) throw new Error('null symbol-attributes is not allowed');
        if (this._map.has(varname)) throw new Error('variable ' + varname + ' exists');
        this._map.set(varname, symattrs);
        return this;
    }
    has(varname: string): boolean {
        return this.find(varname) != null;
    }
    hasOnTop(varname: string): boolean {
        return this._map.has(varname);
    }
    newFrame(): SymbolFrame { return new SymbolFrame(this); }
    constructor(parent: SymbolFrame) {
        this._map = new Map<string, SymbolAttrs>();
        this._parent = parent;
    }
}

export abstract class SymbolAttrs { }
