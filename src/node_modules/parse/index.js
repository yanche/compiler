"use strict";
class Token {
}
exports.Token = Token;
class ParseTreeNode {
    constructor(sym) {
        this._symbol = sym;
    }
    get symbol() { return this._symbol; }
}
exports.ParseTreeNode = ParseTreeNode;
class ParseTreeMidNode extends ParseTreeNode {
    get children() {
        return this._children;
    }
    set children(c) {
        this._children = c;
    }
    minimize() {
        let c = (this._children || []).map(x => x.minimize()).filter(x => x != null);
        if (c.length === 0)
            return null;
        if (c.length === 1)
            return c[0];
        else {
            let node = new ParseTreeMidNode(this._symbol);
            node.children = c;
            return node;
        }
    }
}
exports.ParseTreeMidNode = ParseTreeMidNode;
class ParseTreeTermNode extends ParseTreeNode {
    get token() {
        return this._token;
    }
    set token(t) {
        if (this._symbol !== t.symbol)
            throw new Error('symbol does not match: ' + this._symbol + ', ' + t.symbol);
        this._token = t;
    }
    minimize() {
        return this;
    }
}
exports.ParseTreeTermNode = ParseTreeTermNode;
class ParseReturn {
    constructor(accept, root, errmsg, errcode) {
        if (accept) {
            if (root == null)
                throw new Error('must provide a root node of parse tree if accepted');
            if (errmsg != null || errcode != null)
                throw new Error('errmsg and errcode must not be specified if accepted');
        }
        else {
            if (root != null)
                throw new Error('root node must not be specified if not accepted');
            if (errcode == null)
                throw new Error('must provide an error code if not accepted');
        }
        this._accept = accept;
        this._root = root;
        this._errmsg = errmsg;
        this._errcode = errcode;
    }
    get accept() { return this._accept; }
    get root() { return this._root; }
    get errmsg() { return this._errmsg; }
    get errcode() { return this._errcode; }
}
exports.ParseReturn = ParseReturn;
//# sourceMappingURL=index.js.map