"use strict";
const assert = require('assert');
const utility = require('utility');
const index_1 = require('../index');
function validate(firstSet, expected) {
    assert.equal(true, utility.arrayEquivalent([...firstSet], expected, function (f, e) {
        return f[0] === e.symbol && utility.arrayEquivalent([...f[1]], e.firsts);
    }));
}
;
describe('first sets', function () {
    it('simple 1', function () {
        let pset = index_1.createProdSet([
            'E -> T + E | T',
            'T -> int | int * T | ( E )'
        ]);
        validate(pset.firstSet(), [
            { symbol: 'E', firsts: ['int', '('] },
            { symbol: 'T', firsts: ['int', '('] },
            { symbol: '(', firsts: ['('] },
            { symbol: ')', firsts: [')'] },
            { symbol: '+', firsts: ['+'] },
            { symbol: '*', firsts: ['*'] },
            { symbol: 'int', firsts: ['int'] }
        ]);
    });
    it('simple 2', function () {
        let pset = index_1.createProdSet([
            'E -> '
        ]);
        validate(pset.firstSet(), [
            { symbol: 'E', firsts: [] }
        ]);
    });
    it('simple 3', function () {
        let pset = index_1.createProdSet([
            'T -> E | int',
            'E -> '
        ]);
        validate(pset.firstSet(), [
            { symbol: 'E', firsts: [] },
            { symbol: 'T', firsts: ['int'] },
            { symbol: 'int', firsts: ['int'] }
        ]);
    });
    it('simple 4', function () {
        let pset = index_1.createProdSet([
            'A -> T',
            'T -> E X | int',
            'X -> q | ',
            'E -> | m'
        ]);
        validate(pset.firstSet(), [
            { symbol: 'E', firsts: ['m'] },
            { symbol: 'T', firsts: ['m', 'q', 'int'] },
            { symbol: 'X', firsts: ['q'] },
            { symbol: 'A', firsts: ['m', 'q', 'int'] },
            { symbol: 'int', firsts: ['int'] },
            { symbol: 'q', firsts: ['q'] },
            { symbol: 'm', firsts: ['m'] }
        ]);
    });
    it('simple 5', function () {
        let pset = index_1.createProdSet([
            'TT -> EE | inXt',
            'EE -> '
        ]);
        validate(pset.firstSet(), [
            { symbol: 'EE', firsts: [] },
            { symbol: 'TT', firsts: ['inXt'] },
            { symbol: 'inXt', firsts: ['inXt'] }
        ]);
    });
});
//# sourceMappingURL=firstset.js.map