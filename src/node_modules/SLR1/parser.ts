
import * as prod from 'productions';
import * as utility from 'utility';
import * as dfa from 'DFA';
import * as nfa from 'NFA';
import * as _ from 'lodash';
import * as p from 'parse';

interface Item {
    prodid: number,
    dot: number,
    prod: prod.ProductionRef
}

function itemInStr(item: Item, prodset: prod.ProdSet): string {
    let rnums = item.prod.rnums;
    let arr = new Array<string>(), i = 0, len = rnums.length;
    while (i <= len) {
        if (i === item.dot) arr[i] = '.';
        else if (i > item.dot) arr[i] = prodset.getSymInStr(rnums[i - 1]);
        else arr[i] = prodset.getSymInStr(rnums[i]);
        ++i;
    }
    return prodset.getSymInStr(item.prod.lnum) + ' -> ' + arr.join(' ');
}

abstract class Action { }
class ShiftAction extends Action {
    constructor(public toStateNum: number) { super(); }
}
class ReduceAction extends Action {
    constructor(public nont: number, public rhslen: number) { super(); }
}
class AcceptAction extends Action { }

class SLR1ParseTable {
    private _ptable: Map<number, Map<number, Array<Action>>>;
    private _ambcells: Set<number>;
    private _prodset: prod.ProdSet;

    constructor(prodset: prod.ProdSet) {
        this._ptable = new Map<number, Map<number, Array<Action>>>();
        this._ambcells = new Set<number>();
        this._prodset = prodset;
    }
    addAcceptAction(dfastatenum: number, symnum: number): this {
        return this.addAction(dfastatenum, symnum, new AcceptAction());
    }
    addShiftAction(dfastatenum: number, tranmap: Array<Array<number>>): this {
        for (let tran of tranmap) {
            //tran[0]: sym number, tran[1]: dfa state number
            this.addAction(dfastatenum, tran[0], new ShiftAction(tran[1]));
        }
        return this;
    }
    addReduceAction(dfastatenum: number, follows: Iterable<number>, lnum: number, reducecount: number) {
        for (let f of follows) {
            this.addAction(dfastatenum, f, new ReduceAction(lnum, reducecount));
        }
        return this;
    }
    private addAction(dfastatenum: number, symnum: number, action: Action): this {
        let row = this.initRow(dfastatenum);
        let acts = row.get(symnum);
        if (acts == null) row.set(symnum, [action]);
        else {
            acts.push(action);
            this.markAmbiguousCell(dfastatenum);
        }
        return this;
    }
    private markAmbiguousCell(dfastatenum: number): this {
        this._ambcells.add(dfastatenum);
        return this;
    }
    private initRow(dfastatenum: number): Map<number, Array<Action>> {
        let ret = this._ptable.get(dfastatenum);
        if (ret == null) {
            ret = new Map<number, Array<Action>>()
            this._ptable.set(dfastatenum, ret);
        }
        return ret;
    }
    parse(tokens: Array<p.Token>, startstate: number): p.ParseReturn {
        if (this._ambcells.size > 0) return new p.ParseReturn(false, null, 'the grammar is not a valid SLR(1)', 0);
        let stack = new Array<{ tnode: p.ParseTreeNode, state: number }>(), i = 0, len = tokens.length;
        stack.push({ tnode: null, state: startstate });
        let stacktop = 0;
        while (i <= len) {
            let token: p.Token = ((i === len) ? { rawstr: '', symnum: 0 } : tokens[i]), stackitem = stack[stacktop];
            let acts = this._ptable.get(stackitem.state).get(token.symnum);
            if (acts == null || acts.length === 0) return new p.ParseReturn(false, null, 'input not acceptable', 1);
            let act = acts[0];
            if (act instanceof ShiftAction) {
                stack[++stacktop] = { tnode: new p.ParseTreeTermNode(token.symnum, this._prodset, token), state: act.toStateNum };
                ++i;
            }
            else if (act instanceof ReduceAction) {
                let newstacktop = stacktop - act.rhslen;
                let midnode = new p.ParseTreeMidNode(act.nont, this._prodset, stack.slice(newstacktop + 1, stacktop + 1).map(x => x.tnode));
                let newact = this._ptable.get(stack[newstacktop].state).get(act.nont)[0];
                if (newact instanceof ShiftAction) {
                    stack[++newstacktop] = { tnode: midnode, state: newact.toStateNum };
                    stacktop = newstacktop;
                }
                else if (newact instanceof AcceptAction) {
                    if (i === len) return new p.ParseReturn(true, midnode);
                    else return new p.ParseReturn(false, null, 'input not acceptable, reach to the end of parsing before consume all tokens', 2);
                }
                else throw new Error('impossible code path'); //reserved code path, should be no possible here
            }
            else throw new Error('impossible code path, 2'); //reserved code path, should be no possible here
        }
        throw new Error('impossible code path, 3'); //reserved code path, should be no possible here
    }
}

export default class SLR1Parser implements p.IParser {
    private _prodset: prod.ProdSet;
    private _itemnummap: Array<Array<number>>;
    private _numitemmap: Array<Item>;
    private _nfatrans: Array<utility.automata.Transition>;
    private _nfa: nfa.NFA;
    private _dfa: dfa.DFA;
    private _dfanfastatemap: Map<number, Set<number>>;
    private _parsetable: SLR1ParseTable;
    private _isLR0: boolean;

    constructor(prodset: prod.ProdSet) {
        let prodsize = prodset.getProdSize(), startnontnum = prodset.getStartNonTerminal(), lastitemid: number;
        let itemnummap = new Array<Array<number>>(prodsize), itemidgen = new utility.IdGen(0), numitemmap = new Array<Item>();
        let nfatrans = new Array<utility.automata.Transition>(), startitems = new Array<number>(), parsetable = new SLR1ParseTable(prodset), followsets = prodset.followSet();

        //prodid from 0 -> prodsize - 1
        //loop 1, build the item num mapping
        //number of item, is the number of NFA
        for (let prodid = 0; prodid < prodsize; ++prodid) {
            let prod = prodset.getProdRef(prodid);
            let start = prod.lnum === startnontnum;
            let arr = new Array<number>(prod.rnums.length + 1);
            for (let i = 0; i <= prod.rnums.length; ++i) {
                let itemid = itemidgen.next();
                arr[i] = itemid;
                numitemmap.push({ prodid: prodid, dot: i, prod: prod });
                lastitemid = itemid;
                if (start && i === 0) startitems.push(itemid);
            }
            itemnummap[prodid] = arr;
        }

        for (let prodid = 0; prodid < prodsize; ++prodid) {
            let prod = prodset.getProdRef(prodid), itemarr = itemnummap[prodid];
            for (let i = 0; i < prod.rnums.length; ++i) {
                let rnum = prod.rnums[i], curitem = itemarr[i];
                let rsymstr = prodset.getSymInStr(rnum);
                nfatrans.push(new utility.automata.Transition(curitem, itemarr[i + 1], rsymstr));
                if (!prodset.isSymNumTerminal(rnum)) {
                    for (let prodid2 of prodset.getProds(rnum)) {
                        nfatrans.push(new utility.automata.Transition(curitem, itemnummap[prodid2][0], ''));
                    }
                }
            }
        }

        this._prodset = prodset;
        this._itemnummap = itemnummap;
        this._numitemmap = numitemmap;
        this._nfatrans = nfatrans;
        //todo: terminalnfanums
        this._nfa = nfa.createNFA(nfatrans, startitems, _.range(lastitemid + 1));
        let dfaret = this._nfa.toDFA();
        this._dfa = dfaret.dfa;
        this._dfanfastatemap = dfaret.statemap;
        this._parsetable = parsetable;

        let isLR0 = true;
        //construct parsing table SLR(1)
        parsetable.addAcceptAction(this._dfa.getStartState(), startnontnum);
        for (let dstate of dfaret.statemap) {
            let dfanum = dstate[0], nfanums = dstate[1];
            parsetable.addShiftAction(dfanum, [...this._dfa.getTransitionMap(dfanum)].map(x => [prodset.getSymNum(x[0]), x[1]]));
            let hasreducemove = false;
            for (let n of nfanums) {
                //state number of NFA is the number of item
                let item = numitemmap[n];
                if (item.dot === item.prod.rnums.length) {
                    hasreducemove = true;
                    parsetable.addReduceAction(dfanum, followsets[item.prod.lnum], item.prod.lnum, item.dot);
                }
            }
            if (isLR0 && hasreducemove && nfanums.size > 1)
                isLR0 = false;
        }

        this._isLR0 = isLR0;
    }
    isLR0Grammar(): boolean { return this._isLR0; }
    print(): this {
        console.log('DFA: ');
        this._dfa.print();
        for (let th of this._dfanfastatemap) {
            let dfanum = th[0], nfanums = th[1];
            console.log('DFA state ' + dfanum + ' contains items: ');
            for (let n of nfanums) {
                console.log(itemInStr(this._numitemmap[n], this._prodset));
            }
        }
        return this;
    }
    parse(tokens: Array<p.Token>): p.ParseReturn {
        return this._parsetable.parse(tokens, this._dfa.getStartState());
    }
    getSymNum(sym: string): number {
        return this._prodset.getSymNum(sym);
    }
}
