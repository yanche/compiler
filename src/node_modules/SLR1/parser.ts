
import * as prod from 'productions';
import * as utility from 'utility';
import * as dfa from 'DFA';
import * as nfa from 'NFA';

class Item {
    private _id: string;
    constructor(public lhs: string, public rhs: Array<prod.Symbol>, public dot: number) {
        let arr = new Array<string>(), i = 0, len = rhs.length;
        while (i <= len) {
            if (i === dot) arr[i] = '.';
            else if (i > dot) arr[i] = rhs[i - 1].getName();
            else arr[i] = rhs[i].getName();
            ++i;
        }
        this._id = lhs + ' -> ' + arr.join(' ');
    }
    print(): this {
        console.log(this._id);
        return this;
    }
}

export default class SLR1Parser {
    private _prodset: prod.ProdSet;
    private _itemnummap: ItemNumMap;
    private _nfatrans: Array<utility.automata.Transition>;
    private _nfa: nfa.NFA;
    private _dfa: dfa.DFA;
    private _dfanfastatemap: Map<number, Set<number>>;

    constructor(prodset: prod.ProdSet) {
        let startnont = prodset.getStartNonTerminal(), queue = new Array<string>(), itemnummap = new ItemNumMap();
        let nfatrans = new Array<utility.automata.Transition>(), processednont = new Set<string>(), startnfanums = new Array<number>(), terminalnfanums = new Array<number>();
        queue.push(startnont);
        while (queue.length > 0) {
            let lstr = queue.pop();
            processednont.add(lstr);
            for (let rsyms of prodset.getRHSArr(lstr)) {
                let nums = itemnummap.getOrCreateNums(lstr, rsyms), i = 0, len = rsyms.length;
                if (lstr === startnont) {
                    startnfanums.push(nums[0]);
                    terminalnfanums.push(nums[len]);
                }
                while (i < len) {
                    let rsym = rsyms[i];
                    let rname = rsym.getName();
                    nfatrans.push(new utility.automata.Transition(nums[i], nums[i + 1], rname));
                    if (!rsym.isTerminal()) {
                        let itemnum = nums[i];
                        for (let nrsyms of prodset.getRHSArr(rname)) {
                            let nnums = itemnummap.getOrCreateNums(rname, nrsyms);
                            nfatrans.push(new utility.automata.Transition(itemnum, nnums[0], '')); //epsilon move
                        }
                        if (!processednont.has(rname))
                            queue.push(rname);
                    }
                    ++i;
                }
            }
        }

        this._prodset = prodset;
        this._itemnummap = itemnummap;
        this._nfatrans = nfatrans;
        this._nfa = nfa.createNFA(nfatrans, startnfanums, terminalnfanums);
        let dfaret = this._nfa.toDFA();
        this._dfa = dfaret.dfa;
        this._dfanfastatemap = dfaret.statemap;
    }
    print(): this {
        console.log('DFA: ');
        this._dfa.print();
        for (let th of this._dfanfastatemap) {
            let dfanum = th[0], nfanums = th[1];
            console.log('DFA state ' + dfanum + ' contains items: ');
            for (let n of nfanums) {
                this._itemnummap.getItem(n).print();
            }
        }
        return this;
    }
}

class ItemNumMap {
    private _itemmap: Map<string, Array<number>>;
    private _nummap: Map<number, Item>;
    private _idgen: utility.IdGen;

    constructor() {
        this._idgen = new utility.IdGen();
        this._itemmap = new Map<string, Array<number>>();
        this._nummap = new Map<number, Item>();
    }
    getItem(num: number): Item { return this._nummap.get(num); }
    getOrCreateNums(lhs: string, rhs: Array<prod.Symbol>): Array<number> {
        let pid = prod.Production.id(lhs, rhs), len = rhs.length;
        if (this._itemmap.has(pid)) return this._itemmap.get(pid);
        let arr = new Array<number>(len + 1);
        for (let i = 0; i <= len; ++i) {
            let num = this._idgen.next();
            arr[i] = num;
            this._nummap.set(num, new Item(lhs, rhs, i));
        }
        this._itemmap.set(pid, arr);
        return arr;
    }
}
