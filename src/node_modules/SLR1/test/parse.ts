
import * as assert from 'assert';
import * as utility from 'utility';
import {createSLR1Parser} from '../index';
import SLR1Parser from '../parser';
import * as p from 'parse';

interface ExpectedData {
    symstr: string;
    mid: boolean;
    children?: Array<ExpectedData>;
    rawstr?: string;
}
function validate(tnode: p.ParseTreeNode, expected: ExpectedData) {
    assert.equal(tnode.symstr, expected.symstr);
    if (tnode instanceof p.ParseTreeMidNode) {
        assert.equal(expected.mid, true);
        let c1 = tnode.children, c2 = expected.children;
        assert.equal(c1.length, c2.length);
        for (let i = 0; i < c1.length; ++i) validate(c1[i], c2[i]);
    }
    else if (tnode instanceof p.ParseTreeTermNode) {
        assert.equal(expected.mid, false);
        assert.equal(expected.rawstr, tnode.token.rawstr);
    }
    else
        throw new Error('impossible code path');
}

describe('SLR(1) parse', function () {
    it('simple 1', function () {
        let slr1parser = createSLR1Parser([
            'E -> T + E | T',
            'T -> int | int * T | ( E )'
        ]);
        let parseret = slr1parser.parse([
            { rawstr: '1', symnum: slr1parser.getSymNum('int') },
            { rawstr: '+', symnum: slr1parser.getSymNum('+') },
            { rawstr: '2', symnum: slr1parser.getSymNum('int') },
            { rawstr: '*', symnum: slr1parser.getSymNum('*') },
            { rawstr: '3', symnum: slr1parser.getSymNum('int') },
        ]);
        assert.equal(true, parseret.accept);
        validate(parseret.root, {
            symstr: 'E',
            mid: true,
            children: [
                {
                    symstr: 'T',
                    mid: true,
                    children: [
                        {
                            symstr: 'int',
                            mid: false,
                            rawstr: '1'
                        }
                    ]
                },
                { symstr: '+', mid: false, rawstr: '+' },
                {
                    symstr: 'E',
                    mid: true,
                    children: [
                        {
                            symstr: 'T',
                            mid: true,
                            children: [
                                { symstr: 'int', mid: false, rawstr: '2' },
                                { symstr: '*', mid: false, rawstr: '*' },
                                {
                                    symstr: 'T', mid: true, children: [
                                        { symstr: 'int', mid: false, rawstr: '3' }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        });
    });
});
