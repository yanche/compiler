"use strict";
const assert = require('assert');
const utility = require('utility');
const index_1 = require('../index');
function bulkValidate(arr, dfa) {
    for (let item of arr) {
        assert.equal(item.expected, dfa.accept(item.str.split('')));
    }
}
;
function tran(src, tgt, str) {
    return new utility.automata.Transition(src, tgt, str);
}
;
describe('dfa-acceptance', function () {
    it('1 state', function () {
        bulkValidate([
            { str: 'aaaaa', expected: true },
            { str: 'a', expected: true },
            { str: 'b', expected: false },
            { str: 'baa', expected: false }
        ], index_1.createDFA([tran(0, 0, 'a')], 0, [0]));
    });
    it('2 states', function () {
        bulkValidate([
            { str: 'aaaaa', expected: false },
            { str: 'a', expected: true },
            { str: 'b', expected: false },
            { str: 'baa', expected: false }
        ], index_1.createDFA([tran(0, 1, 'a')], 0, [1]));
    });
    it('star', function () {
        bulkValidate([
            { str: 'aaaaa', expected: false },
            { str: 'a', expected: true },
            { str: 'b', expected: true },
            { str: 'c', expected: true },
            { str: 'baa', expected: false }
        ], index_1.createDFA([tran(0, 1, 'a'), tran(0, 2, 'b'), tran(0, 3, 'c')], 0, [1, 2, 3]));
    });
});
//# sourceMappingURL=acceptance.js.map