
var assert = require('assert');
var dfa = require('dfa');
var automata = require('automata');

var Transition = automata.Transition;

//arr: array of {str:, expected: bool}
var bulkValidate = function (arr, dfa) {
    for (var i = 0; i < arr.length; ++i) {
        var item = arr[i];
        assert.equal(item.expected, dfa.accept(item.str));
    }
};
//arr: array of strings
var acceptStrings = function (arr, dfa) {
    bulkValidate(arr.map(function (str) { return { str: str, expected: true } }), dfa);
};

var tran = function (srcNode, tgtNode, symbol) {
    return new Transition(srcNode, tgtNode, symbol);
};

describe('dfa-acceptance', function () {
    it('1 state', function () {
        bulkValidate([
            { str: 'aaaaa', expected: true },
            { str: 'a', expected: true },
            { str: 'b', expected: false },
            { str: 'baa', expected: false }
        ], dfa.createDFA([tran(0, 0, 'a')], 0, [0]));
    });

    it('2 states', function () {
        bulkValidate([
            { str: 'aaaaa', expected: false },
            { str: 'a', expected: true },
            { str: 'b', expected: false },
            { str: 'baa', expected: false }
        ], dfa.createDFA([tran(0, 1, 'a')], 0, [1]));
    });

    it('star', function () {
        bulkValidate([
            { str: 'aaaaa', expected: false },
            { str: 'a', expected: true },
            { str: 'b', expected: true },
            { str: 'c', expected: true },
            { str: 'baa', expected: false }
        ], dfa.createDFA([tran(0, 1, 'a'), tran(0, 2, 'b'), tran(0, 3, 'c')], 0, [1, 2, 3]));
    });
});
