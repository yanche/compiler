
var dfa = require('dfa');
var nfautil = require('./util');
var utility = require('utility');

//use this CONV after epsilon closure has been calculated
//input is the begin states
var conv = function (states) {
    if(!Array.isArray(states)) states = [states];
    states = nfautil.epsilonClosureOfStates(states);
    var dfaIdGen = new utility.IdGen();
    var dfastatemap = new Map();
    var start = new dfa.State(dfaIdGen);
    if(states.some(function(s){return s.getTerminal();})) start.terminal(true);
    var startNFAId = statesId(states);
    dfastatemap.set(startNFAId, start);
    var queue = [states];
    while(queue.length > 0) {
        var curstates = queue.shift();
        var curstatesId = statesId(curstates);
        var curdfaState = dfastatemap.get(curstatesId);
        var tmap = new Map();
        for(var i = 0; i < curstates.length; ++i) {
            var trans = curstates[i].getAllTransition();
            for(var t = 0; t < trans.length; ++t) {
                var tpair = trans[t];
                var ch = tpair[0];
                if(ch==='') continue;
                var tostates = [...tpair[1]];
                var chset = tmap.get(ch);
                if(chset == null) {
                    chset = new Set();
                    tmap.set(ch, chset);
                }
                for(var p = 0; p < tostates.length; ++p)
                    chset.add(tostates[p]);
            }
        }
        var tarr = [...tmap];
        for(var i = 0; i < tarr.length; ++i) {
            var tpair = tarr[i];
            var ch = tpair[0], states = nfautil.epsilonClosureOfStates([...tpair[1]]);
            var dfaStateId = statesId(states);
            var dfaState = dfastatemap.get(dfaStateId);
            if (dfaState == null) {
                dfaState = new dfa.State(dfaIdGen);
                if(states.some(function(s){return s.getTerminal();})) dfaState.terminal(true);
                dfastatemap.set(dfaStateId, dfaState);
                queue.push(states);
            }
            curdfaState.transition(ch, dfaState);
        }
    }
    return start;
};

var statesId = function (states) {
    return states.map(function(s){return s.getId();}).sort(function(v1,v2){return v1-v2;}).join(',');
};

module.exports = conv;
